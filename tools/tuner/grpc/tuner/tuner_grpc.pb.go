// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: protos/tuner.proto

package tuner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tuner_RequestEPDInfo_FullMethodName = "/tuner.Tuner/RequestEPDInfo"
	Tuner_RequestJob_FullMethodName     = "/tuner.Tuner/RequestJob"
	Tuner_RegisterResult_FullMethodName = "/tuner.Tuner/RegisterResult"
)

// TunerClient is the client API for Tuner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunerClient interface {
	RequestEPDInfo(ctx context.Context, in *EPDInfoRequest, opts ...grpc.CallOption) (*EPDInfo, error)
	RequestJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
	RegisterResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultAck, error)
}

type tunerClient struct {
	cc grpc.ClientConnInterface
}

func NewTunerClient(cc grpc.ClientConnInterface) TunerClient {
	return &tunerClient{cc}
}

func (c *tunerClient) RequestEPDInfo(ctx context.Context, in *EPDInfoRequest, opts ...grpc.CallOption) (*EPDInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EPDInfo)
	err := c.cc.Invoke(ctx, Tuner_RequestEPDInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunerClient) RequestJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, Tuner_RequestJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunerClient) RegisterResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultAck)
	err := c.cc.Invoke(ctx, Tuner_RegisterResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunerServer is the server API for Tuner service.
// All implementations must embed UnimplementedTunerServer
// for forward compatibility.
type TunerServer interface {
	RequestEPDInfo(context.Context, *EPDInfoRequest) (*EPDInfo, error)
	RequestJob(context.Context, *JobRequest) (*JobResponse, error)
	RegisterResult(context.Context, *ResultRequest) (*ResultAck, error)
	mustEmbedUnimplementedTunerServer()
}

// UnimplementedTunerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunerServer struct{}

func (UnimplementedTunerServer) RequestEPDInfo(context.Context, *EPDInfoRequest) (*EPDInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEPDInfo not implemented")
}
func (UnimplementedTunerServer) RequestJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJob not implemented")
}
func (UnimplementedTunerServer) RegisterResult(context.Context, *ResultRequest) (*ResultAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResult not implemented")
}
func (UnimplementedTunerServer) mustEmbedUnimplementedTunerServer() {}
func (UnimplementedTunerServer) testEmbeddedByValue()               {}

// UnsafeTunerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunerServer will
// result in compilation errors.
type UnsafeTunerServer interface {
	mustEmbedUnimplementedTunerServer()
}

func RegisterTunerServer(s grpc.ServiceRegistrar, srv TunerServer) {
	// If the following call pancis, it indicates UnimplementedTunerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tuner_ServiceDesc, srv)
}

func _Tuner_RequestEPDInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EPDInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RequestEPDInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tuner_RequestEPDInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RequestEPDInfo(ctx, req.(*EPDInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tuner_RequestJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RequestJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tuner_RequestJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RequestJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tuner_RegisterResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RegisterResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tuner_RegisterResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RegisterResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tuner_ServiceDesc is the grpc.ServiceDesc for Tuner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tuner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tuner.Tuner",
	HandlerType: (*TunerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestEPDInfo",
			Handler:    _Tuner_RequestEPDInfo_Handler,
		},
		{
			MethodName: "RequestJob",
			Handler:    _Tuner_RequestJob_Handler,
		},
		{
			MethodName: "RegisterResult",
			Handler:    _Tuner_RegisterResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/tuner.proto",
}
